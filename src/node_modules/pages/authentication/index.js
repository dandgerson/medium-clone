import React, { useState, useEffect, useContext } from 'react'
import { Link, Redirect } from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'

import { CurrentUserContext } from 'contexts/currentUser'

import BackendErrorMessages from 'pages/authentication/components/backendErrorMessages'

const Authentication = (props) => {
  const [username, setUsername] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)

  const isLogin = props.match.path === '/login'

  const pageData = {
    title: isLogin ? 'Sign in' : 'Sign up',
    descriptionLink: isLogin ? '/register' : '/login',
    desctiptionText: isLogin ? 'Need an account?' : 'Have an account?',
    submitBtnTitle: isLogin ? 'Sign in' : 'Sign up',
    apiUrl: isLogin ? '/users/login' : '/users'
  }

  const [{ isLoading, response, error }, doFetch] = useFetch(pageData.apiUrl)
  const [, setToken] = useLocalStorage('token')

  const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext)

  console.log({currentUserState})

  useEffect(() => {
    if (!response) return

    setToken(response.user.token)
    setIsSuccessfullSubmit(true)
    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user,
    }))
  }, [response, setToken, setCurrentUserState])

  const handleSubmit = (event) => {
    event.preventDefault()

    doFetch({
      method: 'post',
      data: {
        user: isLogin ? { email, password } : { username, email, password },
      },
    })
  }

  if (isSuccessfullSubmit) return <Redirect to='/' />

  return (
    <div className="auth-page" >
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">
              {pageData.title}
            </h1>
            <p className="text-xs-center">
              <Link to={pageData.descriptionLink}>{pageData.desctiptionText}</Link>
            </p>
            <form onSubmit={handleSubmit}>
              {error && <BackendErrorMessages backendErrors={error.errors} />}
              <fieldset>
                {!isLogin && (
                  <fieldset className='form-group'>
                    <input
                      className="form-control form-control-lg"
                      type="text"
                      placeholder='Username'
                      value={username}
                      onChange={event => setUsername(event.target.value)}
                    />
                  </fieldset>
                )}
                <fieldset className='form-group'>
                  <input
                    className="form-control form-control-lg"
                    type="email"
                    placeholder='Email'
                    value={email}
                    onChange={event => setEmail(event.target.value)}
                  />
                </fieldset>
                <fieldset className='form-group'>
                  <input
                    className="form-control form-control-lg"
                    type="password"
                    placeholder='Password'
                    value={password}
                    onChange={event => setPassword(event.target.value)}
                  />
                </fieldset>
                <button
                  className="btn btn-lg btn-primary pull-xs-right"
                  type='submit'
                  disabled={isLoading}
                >
                  {pageData.submitBtnTitle}
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Authentication
